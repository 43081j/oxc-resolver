// Code copied from [Rome](https://github.com/rome/tools/blob/main/npm/rome/scripts/generate-packages.mjs)

import { resolve } from "node:path";
import { fileURLToPath } from "node:url";
import * as fs from "node:fs";

const ROOT = resolve(fileURLToPath(import.meta.url), ".."); // oxc_resolver/npm/scripts
const PACKAGES_ROOT = resolve(ROOT, ".."); // oxc_resolver/npm
const BINARY_ROOT = resolve(ROOT, "../../napi"); // oxc_resolver/napi
const MANIFEST_PATH = resolve(PACKAGES_ROOT, "package.json"); // oxc_resolver/npm/package.json

console.log('ROOT', ROOT);
console.log('PACKAGES_ROOT', PACKAGES_ROOT);
console.log('BINARY_ROOT', BINARY_ROOT);
console.log('MANIFEST_PATH', MANIFEST_PATH);

const rootManifest = JSON.parse(
  fs.readFileSync(MANIFEST_PATH).toString("utf-8")
);

console.log('rootManifest', rootManifest);

function package_name(target) {
  return `@oxc-resolver/binding-${target}`
}

function generateNativePackage(target) {
  const binaryName = `resolver.${target}.node`;

  const packageRoot = resolve(PACKAGES_ROOT, `oxc-resolver-${target}`);
  const binarySource = resolve(BINARY_ROOT, binaryName);
  const binaryTarget = resolve(packageRoot, binaryName);

  // Remove the directory just in case it already exists (it's autogenerated
  // so there shouldn't be anything important there anyway)
  fs.rmSync(packageRoot, { recursive: true, force: true });

  // Create the package directory
  console.log(`Create directory ${packageRoot}`);
  fs.mkdirSync(packageRoot);

  // Generate the package.json manifest
  const { version, license, repository } = rootManifest;

  const [os, cpu, third] = target.split("-");
  const manifest = {
    name: package_name(target),
    version,
    main: binaryName,
    files: [binaryName],
    os: [os],
    cpu: [cpu],
    license,
    repository
  };

  if (cpu == "linux" && third == "gnu") {
    manifest.libc = ["glibc"];
  }

  const manifestPath = resolve(packageRoot, "package.json");
  console.log(`Create manifest ${manifestPath}`);
  fs.writeFileSync(manifestPath, JSON.stringify(manifest));

  console.log(`Copy binary ${binaryTarget}`);
  fs.copyFileSync(binarySource, binaryTarget);
}

function writeManifest() {
  const nativePackages = TARGETS.map((target) => [
    package_name(target),
    rootManifest.version,
  ]);

  rootManifest["version"] = rootManifest.version;
  rootManifest["optionalDependencies"] = Object.fromEntries(nativePackages);

  const content = JSON.stringify(rootManifest);
  fs.writeFileSync(MANIFEST_PATH, content);

  let files = ["index.js", "index.d.ts"];
  for (const file of files) {
    fs.copyFileSync(resolve(BINARY_ROOT, file), resolve(PACKAGES_ROOT, file));
  }
}

const TARGETS = [
  "win32-x64-msvc",
  "win32-arm64-msvc",
  "linux-x64-gnu",
  "linux-arm64-gnu",
  "darwin-x64",
  "darwin-arm64",
];

for (const target of TARGETS) {
  generateNativePackage(target);
}

writeManifest();
